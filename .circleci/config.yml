version: 2

defaults:
  - workflow_trigger_on_tags: &workflow_trigger_on_tags
      filters:
        tags:
          only: /.*/

  - workflow_x64_ubuntu1904_gcc: &workflow_x64_ubuntu1904_gcc
      <<: *workflow_trigger_on_tags
      requires:
        - build_x64_ubuntu1904_gcc

  - workflow_x64_ubuntu1904_clang: &workflow_x64_ubuntu1904_clang
      <<: *workflow_trigger_on_tags
      requires:
        - build_x64_ubuntu1904_clang

  - run_install_deps: &run_install_deps
      name: Install Dependencies
      command: |
        apt-get update
        apt-get install -qy --no-install-recommends \
          build-essential \
          software-properties-common \
          cmake ninja-build clang++-8 g++ lcov

  - setup_prerelease_commit_hash: &setup_prerelease_commit_hash
      name: Store commit hash and prerelease
      command: |
        if [ "$CIRCLE_BRANCH" = release -o -n "$CIRCLE_TAG" ]; then echo -n > prerelease.txt; else date -u +"nightly.%Y.%-m.%-d" > prerelease.txt; fi
        echo -n "$CIRCLE_SHA1" > commit_hash.txt

  - checkout_submodules: &checkout_submodules
      name: Checkout submodules recursively
      command: |
        set -ex
        git submodule sync --recursive
        git submodule update --recursive --init

  - run_build: &run_build
      name: Build
      command: |
        set -ex
        mkdir build
        cd build
        CMAKE_OPTIONS=(-DCMAKE_CXX_COMPILER=$CXX -DLIBTERMINAL_COVERAGE=$COVERAGE)
        test -n "${CMAKE_TOOLCHAIN_FILE}" && CMAKE_OPTIONS=(${CMAKE_OPTIONS[@]} -DCMAKE_TOOLCHAIN_FILE=${CMAKE_TOOLCHAIN_FILE})
        cmake .. -DCMAKE_BUILD_TYPE="Debug" "${CMAKE_OPTIONS[@]}"
        make -j3

  - test_x64_ubuntu1904: &test_x64_ubuntu1904
      docker:
        - image: buildpack-deps:disco
      steps:
        - checkout
        - attach_workspace:
            at: build
        - run: *run_install_deps
        - run:
            name: test result prep
            command: mkdir build/test_results
        - run:
            name: terminal_test
            command: ./build/terminal_test --reporter junit -o build/test_results/terminal_test.xml
        - run:
            name: Coverage
            command: |
              set -ex
              if [ "$COVERAGE" = "ON" ]; then
                cd build
                # Capture coverage and create report to "coverage.info":
                lcov --capture --directory . --output-file coverage.info
                # filter out system files, 3rdparty, and others:
                lcov --remove coverage.info "/usr/*" "/root/project/3rdparty/*" --output-file coverage.info
                # output coverage data (for debugging)
                lcov --list coverage.info
                # upload report
                bash <(curl -s https://codecov.io/bash) -f coverage.info
                # bash <(curl -s https://codecov.io/bash) -g '*3rdparty/*'
                # codecov --flags all --gcov-glob '*3rdparty/*'
              fi
        - store_test_results:
            path: build/test_results
        - store_artifacts:
            path: build

jobs:

  build_x64_ubuntu1904_gcc:
    docker:
      - image: buildpack-deps:disco
    environment:
      COVERAGE: "ON"
      CXX: "g++"
    steps:
      - checkout
      - run: *run_install_deps
      - run: *checkout_submodules
      - run: *run_build
      - persist_to_workspace:
          root: build
          paths:
            - "*"

  build_x64_ubuntu1904_gcc_cxx20:
    docker:
      - image: buildpack-deps:disco
    environment:
      COVERAGE: "ON"
      CXX: "g++"
      CMAKE_TOOLCHAIN_FILE: "cmake/toolchains/cxx20.cmake"
    steps:
      - checkout
      - run: *run_install_deps
      - run: *checkout_submodules
      - run: *run_build
      - persist_to_workspace:
          root: build
          paths:
            - "*"

  build_x64_ubuntu1904_clang:
    docker:
      - image: buildpack-deps:disco
    environment:
      COVERAGE: "OFF"
      CXX: "clang++-8"
    steps:
      - checkout
      - run: *run_install_deps
      - run: *checkout_submodules
      - run: *run_build
      - persist_to_workspace:
          root: build
          paths:
            - "*"

  build_x64_ubuntu1904_clang_cxx20:
    docker:
      - image: buildpack-deps:disco
    environment:
      COVERAGE: "OFF"
      CXX: "clang++-8"
      CMAKE_TOOLCHAIN_FILE: "cmake/toolchains/cxx20.cmake"
    steps:
      - checkout
      - run: *run_install_deps
      - run: *checkout_submodules
      - run: *run_build
      - persist_to_workspace:
          root: build
          paths:
            - "*"

  build_x64_osx:
    macos:
      xcode: "10.0.0"
    environment:
      CMAKE_BUILD_TYPE: "Debug"
    steps:
      - checkout
      - run:
          name: Install Dependencies
          command: |
            brew install cmake
      - run: *checkout_submodules
      - run: *run_build
      - store_artifacts:
        - build/terminal_test
        - build/examples/pty_example
        - build/examples/proxy_term
      - persist_to_workspace:
          root: build
          paths:
            - "*"

  test_x64_ubuntu1904_gcc:
    <<: *test_x64_ubuntu1904
    environment:
      COVERAGE: "ON"

  test_x64_ubuntu1904_clang:
    <<: *test_x64_ubuntu1904
    environment:
      COVERAGE: "OFF"

workflows:
  version: 2

  build_and_test:
    jobs:
      - build_x64_ubuntu1904_gcc: *workflow_trigger_on_tags
      - build_x64_ubuntu1904_gcc_cxx20: *workflow_trigger_on_tags
      - build_x64_ubuntu1904_clang: *workflow_trigger_on_tags
      - build_x64_ubuntu1904_clang_cxx20: *workflow_trigger_on_tags
      - build_x64_osx: *workflow_trigger_on_tags
      - test_x64_ubuntu1904_gcc: *workflow_x64_ubuntu1904_gcc
      - test_x64_ubuntu1904_clang: *workflow_x64_ubuntu1904_clang
